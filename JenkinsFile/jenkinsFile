pipeline {
	agent any
		stages {
			//Properties File loading
			stage('Load Properties File') {
				steps {
					script {
						gitHubProps = readProperties file: 'PropertiesFile/github.properties'
						artProps = readProperties file: 'PropertiesFile/artifactory.properties'
						sonarProps = readProperties file: 'PropertiesFile/sonarQube.properties'
						deployProps = readProperties file: 'PropertiesFile/deployment.properties'
						
						git url: gitHubProps.GIT_UTIL_REPO, branch: gitHubProps.GIT_UTIL_REPO_BRANCH
						commonFns = load gitHubProps.COMMON_FNS
						echo "Properties File load Success"
						}
					}
			}

			//GIT Cloning
			stage('SCM Checkout') {
				steps {
					git url: gitHubProps.GIT_APP_REPO, branch: gitHubProps.GIT_APP_REPO_BRANCH
					echo 'SCM Checkout Success'
					}
			}

			//Sonar Scanning
			stage('SonarQube Analysis') {
				steps {
					dir(gitHubProps.PROJECT_PATH) {
						sh sonarProps.BUILD_SONAR_SCAN
						echo 'SoanrQube Analysis Success'
					}
				}
			}
			
			//Maven Building
			stage('Maven Build') {
				steps {
					dir(gitHubProps.PROJECT_PATH) {
						sh gitHubProps.MAVEN_BUILD
						echo 'Maven Build Success'
					}
				}
			}			
			
			//Artifact Archiving and Uploading
			stage('Artifact Upload') {
				script {
					commonFns.uploadToArtifactory()
	            	}
				}
			}	
			
			// Docker Deploying
			stage('Docker Deployment') {
				steps {
					script {
						try	{
							sh deployProps.dockerContainerId
							res=readFile('result').trim()
							
							if(res!=null) {
								sh deployProps.dockerContainerRm
								echo "Docker Container Found and removed"
							}
						} catch (err) {
							echo "Delete Failed"
						}
						
						sh deployProps.dockerDeploy
						echo "Deployment Success"
						sh deployProps.dockerRestart
						echo "Docker Restarted"
						
					}		
				}
			}
					
		}
		
		
//Status eMail Triggering
post {
	always {
		script {
			commonFns.triggerEmail()
		}
    }
}
