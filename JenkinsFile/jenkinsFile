pipeline {
	agent any
		stages {
			//Properties File loading
			stage('Load Properties File') {
				steps {
					script {
						gitHubProps = readProperties file: 'PropertiesFile/github.properties'
						artProps = readProperties file: 'PropertiesFile/artifactory.properties'
						sonarProps = readProperties file: 'PropertiesFile/sonarQube.properties'  
						echo "Properties File load Success"
						}
					}
			}

			//GIT Cloning
			stage('SCM Checkout') {
				steps {
					git url: gitHubProps.GIT_APP_REPO,
					branch: gitHubProps.GIT_APP_REPO_BRANCH
					echo 'SCM Checkout Success'
					}
			}

			//Sonar Scanning
			stage('SonarQube Analysis') {
				steps {
					dir(gitHubProps.PROJECT_PATH) {
						sh sonarProps.BUILD_SONAR_SCAN
						echo 'SoanrQube Analysis Success'
					}
				}
			}
			
			//Maven Building
			stage('Maven Build') {
				steps {
					dir(gitHubProps.PROJECT_PATH) {
						sh gitHubProps.MAVEN_BUILD
						echo 'Maven Build Success'
					}
				}
			}			
			
			//POM File Reading
			stage('POM Read') {
				steps {
					script {
						pom = readMavenPom file: gitHubProps.POM_FILE
						artifactId = pom.artifactId
						version = pom.version
						buildNo = env.BUILD_NUMBER
						echo "POM Details Load Success"
					}					
				}
			}			
			
			//Artifact Archiving and Uploading
			stage('Artifact Upload') {
				steps {
					script {
						server = Artifactory.server artProps.ARTIFACTORY_SERVER
						def uploadSpec = """{
							"files": [
	                    		{
	                    			"pattern": "target/*.war",
	                        		"target": "demo-java/target/"
	                    		}
	                    		]
	                		}"""
	                		echo "Artifact Archival Success"
	                	server.upload(uploadSpec) 
              			echo "Artifact Upload Success"
	            	}
				}
			}			
		}
		
		
		//Status eMail Triggering
		post {
        always {
			script {
				emailext( 
					to: gitHubProps.TO_RECIPIENT,
					subject: '${DEFAULT_SUBJECT}', 
					body: '${DEFAULT_CONTENT}'
				)
				echo "Status Mail Send Success"
			}
        }
    }
		
}
